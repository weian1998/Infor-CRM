<?xml version="1.0" encoding="utf-8"?>
<appSettings>
  <add key="log4net.Config" value="log4net.Config" />
  <add key="nhibernate-logger" value="Sage.Platform.Log4NetLoggerFactory, Sage.Platform" />
  <add key="LogoffRedirectUrl" value="~/logoff.aspx" />
  <add key="LookupControlMaxResults" value="500" />
  <add key="DefaultHelpLanguage" value="en" />
  <add key="HelpCSHFilename" value="WebCustomerPortal_CSH.htm" />
  <add key="vs:EnableBrowserLink" value="false" />
  <!--
      Setting the ShowBindingErrorsAtRuntime flag to "true" will display messages whenever there are
      exceptions during databinding.  A setting of "false" will not display messages to the user.
    -->
  <add key="ShowBindingErrorsAtRuntime" value="false" />
  <!--
      When set to true, ApplyFieldLevelSecurityOnInsert tells field-level security to use the security
      configuration when inserting an entity.  If this value is set to false, the user may set entity
      properties, regardless of how field-level security is configured for the user.  The default is false.
    -->
  <add key="ApplyFieldLevelSecurityOnInsert" value="false" />
  <!--
    Change the caching provider to the Memcached for distributed caching (specifically for the Virtual File System).
    This is critical for a web farm environment, as the HashtableCacheProvider is for a single process.
  -->
  <!--<add key="sage.platform.application.caching.cacheProvider" value="Sage.Platform.Application.Caching.HashtableCacheProvider, Sage.Platform.Application"/>-->
  <add key="sage.platform.application.caching.cacheProvider" value="Sage.Platform.Caches.Memcached.CacheProvider, Sage.Platform.Caches.Memcached"/>
  <add key="sage.scheduling.client.serverUrl" value="http://localhost:1895"/>
  <add key="sage.platform.scheduling.tenantId" value="SlxJobService"/>
  
  <!--
    Determines whether the current user (as identified by the Thread.CurrentPrincipal.Identity.Name)
    is listed as an SLXErrorLookupService user in the call to Sage.Platform.Diagnostics.ErrorHelper.IsSLXErrorLookupServiceUser().
    The IsSLXErrorLookupServiceUser() method determines if a user can retrieve event log data by calling the
    SLXErrorLookupService implemented in /SlxClient/SLXErrorLookupService.asmx.
    
    Example call: /SlxClient/SLXErrorLookupService.asmx/GetEventLogError?slxErrorId=SLX512BA83F6230C58F
    
    Note: If the user is a development user (e.g. IsDevelopmentUser()) the user can make calls into the SLXErrorLookupService without
    requiring their UserSecurity.UserCode to be included in the sage.saleslogix.web.diagnostics.slxErrorLookupService-administrativeUserCodes AppSettings value.    
  -->
  <add key="sage.saleslogix.web.diagnostics.slxErrorLookupService-administrativeUserCodes" value="" />

  <!--
      Determines whether the current user (as identified by the Thread.CurrentPrincipal.Identity.Name)
      is included as a development user in the call to Sage.Platform.Diagnostics.ErrorHelper.IsDevelopmentUser().
      If the user is a development user they will see additional error information for AJAX exceptions
      handled using Sage.Utility.ErrorHandler.handleHttpError() in Sage/Utility/ErrorHandler.js.
      The additional information displayed includes StackTrace, TargetSite, and extended Source information.
      Note: The additional information is also displayed automatically if the compilation debug setting in
      web.config is set to true, or if a debugger is attached to the process, or if the request is from localhost.
    -->
  <add key="sage.platform.diagnostics.developmentContext-developerUserCodes" value="" />
  
  <!--
      Determines whether the current user (as identified by the Thread.CurrentPrincipal.Identity.Name)
      is excluded as a development user in the call to Sage.Platform.Diagnostics.ErrorHelper.IsDevelopmentUser().
      If the user is excluded the user will [not] see extended error information from AJAX errors. This allows
      a developer to experience what the user does when AJAX errors are handled in the call to
      Sage.Utility.ErrorHandler.handleHttpError() in Sage/Utility/ErrorHandler.js.
    -->
  <add key="sage.platform.diagnostics.developmentContext-nonDeveloperUserCodes" value="" />
  
  <!--
    Determines whether AJAX preemption error handling is enabled. The default value is true.
  -->
  <add key="sage.platform.diagnostics.ajaxPreemption-enabled" value="true" />
  
  <!--
    Determines whether AJAX preemption error handling can redirect HTTP requests that respond
    with a 575 status code to Login.aspx. The default value is true.
  -->
  <add key="sage.platform.diagnostics.ajaxPreemption-allowAuthRedirect" value="true" />
  <!--
    Determines the additional HTTP status codes that AJAX preemption error handling will handle and display
    an error message for. The default value for this setting is: 577,578,579,580,581,582    
    • 577 - AjaxRoleAccessDeniedResponse (Sage.Platform.Security.RoleAccessDeniedException)
    • 578 - AjaxValidationResponse (Sage.Platform.Application.ValidationException)
    • 579 - AjaxUserObservableResponse (Sage.Platform.Security.UserObservableException)
    • 580 - AjaxHttpRequestValidationResponse (System.Web.HttpRequestValidationException)
    • 581 - AjaxStringOrBinaryDataWouldBeTruncatedResponse (System.Data.OleDb.OleDbException)
            • MSSQL: Used when the OleDbException.ErrorCode is DB_E_DATAOVERFLOW (0x80040E57).
            • Oracle: Used when the OleDbException.Message starts with "ORA-12899:".
    • 582 - AjaxAccessResponse (Sage.Platform.Application.AccessException)
    
    The following HTTP status codes are handled via other configuration settings:    
    • 500 - sage.platform.diagnostics.ajaxPreemption-showInternalServerErrorMsg and
            sage.platform.diagnostics.ajaxPreemption-showUnhandledMessagingServiceExceptionMsg
    • 575 - sage.platform.diagnostics.ajaxPreemption-allowAuthRedirect
    • 576 - sage.platform.diagnostics.ajaxPreemption-showPreemptedErrorMsg    
  -->
  <add key="sage.platform.diagnostics.ajaxPreemption-handledStatusCodes" value="577,578,579,580,581,582"/>
  <!--
    Determines whether AJAX preemption error handling can display an error message for HTTP
    requests that respond with a 576 status code. The default value is false.
  -->
  <add key="sage.platform.diagnostics.ajaxPreemption-showPreemptedErrorMsg" value="false" />
  
  <!--
    Determines whether AJAX preemption error handling can display an error message for HTTP
    requests that respond with a 500 status code. The default value is false.
    Note: If the 500 status code is from Sage.Integration.Messaging.MessagingService see the
    sage.platform.diagnostics.ajaxPreemption-showUnhandledMessagingServiceExceptionMsg setting
    which overrides this setting.
  -->
  <add key="sage.platform.diagnostics.ajaxPreemption-showInternalServerErrorMsg" value="false" />
  
  <!--
    Determines whether AJAX preemption error handling can display an error message for HTTP requests processed by
    Sage.Integration.Messaging.MessagingService that respond with a 500 status code. The default value is true.  
  -->
  <add key="sage.platform.diagnostics.ajaxPreemption-showUnhandledMessagingServiceExceptionMsg" value="true"/>
  
  <!--
    Determines whether a trapped Exception of the type ValidationException, RoleAccessDeniedException, or
    UserObservableException should always be logged when handled by Sage.Platform.Diagnostics.ErrorHelper
    and the SLXEventLogAppender.
  -->
  <add key="sage.platform.diagnostics.errorHelper-alwaysLogExceptions" value="true"/>
  
  <!--
    Determines whether an Exception message, as handled by Sage.Platform.Diagnostics.ErrorHelper, should always publish
    the original Exception message (for base exceptions) instead of the "We're sorry, you've encountered an error."
    error message.
  -->
  <add key="sage.platform.diagnostics.errorHelper-alwaysShowExceptionMsg" value="false"/>
  <!--
    Determines whether a Sage.Platform.Security.RoleAccessDeniedException displays extended exception 
    information (StackTrace, etc.) to the user (when applicable). This may be useful in a development
    scenario. The default value is false.
  -->
  <add key="sage.platform.diagnostics.errorHelper-showExtendedExceptionInfo-roleAccessDeniedException" value="false" />
  
  <!--
    Determines whether a Sage.Platform.Application.ValidationException displays extended exception 
    information (StackTrace, etc.) to the user (when applicable). This may be useful in a development
    scenario. The default value is false.
  -->
  <add key="sage.platform.diagnostics.errorHelper-showExtendedExceptionInfo-validationException" value="false" />

  <!--
    Determines how much logging information is recorded in the Application event log when the
    Saleslogix Error Id is recorded along with exception details.

    0 = General. Best when log file size is a consideration.
    
    Includes: slxErrorId, mitigation, date, utc, message, source, type, stackTrace, targetSite, hashCode, pid, identity.name,
    identity.isAuthenticated, identity.authenticationType, request.looksLikeAjax, request.isLocal, request.method,
    request.url, request.referrer and other exception details for specific exceptions types (e.g. oledbException,
    webException, httpException, etc.).
    
    1 = Detailed.
    
    Includes: All of the above plus request.ipAddress, request.userAgent, request.userLanguages, browser.type,
    browser.name, browser.version, browser.majorVersion, browser.minorVersion, browser.platform, server.machineName,
    server.commandLine, server.versionString, server.is64BitOperatingSystem, host.siteName, host.applicationPhysicalPath,
    host.applicationVirtualPath, host.isDebuggingEnabled, host.isHosted, host.maxConcurrentRequestsPerCPU,
    host.maxConcurrentThreadsPerCPU, host.applicationId, logonUser.name, logonUser.authenticationType,
    logonUser.impersonationLevel, logonUser.isAnyonymous, logonUser.isGuest, and logonUser.isSystem.
    
    2 = Verbose. Best for capturing details to be sent to Sage for analysis along with crash dumps (if applicable).
    
    Includes: All of the above plus process.sessionId, process.fileName, process.fileVersion,
    process.productVersion, process.basePriority, process.priorityClass, times.startTime, times.upTime,
    times.privilegedProcessorTime, times.totalProcessorTime, times.userProcessorTime, memory.maxWorkingSet,
    memory.minWorkingSet, memory.workingSet64, memory.peakWorkingSet64, memory.nonpagedSystemMemorySize64,
    memory.pagedMemorySize64, memory.pagedSystemMemorySize64, memory.peakPagedMemorySize64, memory.peakVirtualMemorySize64,
    memory.privateMemorySize64, memory.virtualMemorySize64, and memory.managedMemorySize.
    -->
  <add key="sage.platform.diagnostics.errorHelper-logLevel" value="1" />
  <!--
    Determines whether or not authentication failures that result in a redirect to Login.aspx (or Shutdown.axd) are logged.    
    The default value is true if this setting is undefined.
  -->
  <add key="sage.platform.diagnostics.errorHelper-logAuthenticationRedirects" value="true" />
  <!--
    Determines the shutdown URL used during authentication redirects when Windows Authentication is enabled.
  -->
  <add key="sage.platform.diagnostics.errorHelper-shutdownUrl" value="Shutdown.axd" />
  <!--
    Defines the fail-safe log folder for storing logging information from SLXEventLogAppender that is too large to log to the application event log.
    If this value is undefined and the portal includes an App_Data folder, the fail-safe log folder (i.e. fslog) will be created as a subfolder of
    the App_Data folder. If the App_Data folder is undefined for a portal the fslog folder will be created as a subfolder of the root (e.g. PortalName\fslog).
  -->
  <add key="sage.saleslogix.web.slxeventlogappender.failSafeLogFolder" value="" />

  <!--
    Defines the settings for sending email:
       mailHost: the server that will be used to send mail
       mailPort: the port for sending mail
       credentialUser: the user who's credentials will be used to sent the email (Example:John.Smith@infor.com or SalesLogix@infor.com)
       credentialPassword: the password of the 'credentialUser'
       fromEmailAddress: the email address of the user who will be used to send the email (Example: John.Smith@infor.com or SalesLogix@infor.com)
       fromName: the name you want displayed as the name the email came from (Example: John Smith or Saleslogix Customer Service)
  -->
  <add key="saleslogix.web.mailHost" value="" />
  <add key="saleslogix.web.mailPort" value="" />
  <add key="saleslogix.web.enableSsl" value="" />
  <add key="saleslogix.web.credentialUser" value="" />
  <add key="saleslogix.web.credentialPassword" value="" />
  <add key="saleslogix.web.fromEmailAddress" value="" />
  <add key="saleslogix.web.fromName" value="" />
  <!--
    Defines whether the 'Forgot My Username' and 'Forgot My Password' features are available
  -->
  <add key="saleslogix.web.forgotUserNameFeature" value="true" />
  <add key="saleslogix.web.forgotPasswordFeature" value="true" />
  <!--
    Defines whether the 'Password Change Confirmation' email will be sent
  -->
  <add key="saleslogix.web.sendPasswordResetEmail" value="false"/>
  <!--
    Defines how many hours before the password reset link will expire
  -->
  <add key="saleslogix.web.passwordResetTokenExpiration" value="12"/>
  <!--
    Defines whether audit logging will take place
  -->
  <add key="saleslogix.web.auditLogEnabled" value="true" />
</appSettings>
