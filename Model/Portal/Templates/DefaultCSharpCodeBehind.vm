//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

#set ($baseType = $page.GetBasePageFullName())
#set ($portal = $page.Portal)
using System;
using System.Data;
using System.Collections.Generic;
using System.Configuration;
using System.Web;
using System.Linq;
using System.Web.Security;
using System.Web.UI;
using System.Web.UI.WebControls;
using System.Web.UI.WebControls.WebParts;
using System.Web.UI.HtmlControls;
using System.Threading;
using System.Globalization;
using Sage.Platform.Application;
using Sage.Platform.Application.Diagnostics;
using Sage.Platform.Application.UI;
using Sage.Platform.Application.UI.Web;
using Sage.Platform.Configuration;
using Sage.Platform.Data;
using Sage.Platform.Diagnostics;
using Sage.Platform.EntityBinding;
using Sage.Platform.Orm;
using Sage.Platform.Orm.Entities;
using Sage.Platform.Security;
using Sage.Platform.Services;
using Sage.Platform.VirtualFileSystem;
using Sage.Platform.WebPortal;
using Sage.Platform.WebPortal.Services;
using Sage.Platform.WebPortal.SmartParts;
using Sage.Platform.WebPortal.UI;
using Sage.Platform.WebPortal.Workspaces;
using Sage.SalesLogix.Security;
using Sage.SalesLogix.Web;

namespace ${portal.PortalAlias}
{
    public partial class ${page.PageAlias}Page : $baseType
    {
        static readonly log4net.ILog log = log4net.LogManager.GetLogger(System.Reflection.MethodBase.GetCurrentMethod().DeclaringType);
        private const string ImageClass = $tools.GetPageImageClassName($page).to_quote;

        ScriptManager _scriptManager;

        #region Dependency Properties

        private IUIElementAdapterFactoryCatalog _adapterCatalog;
        /// <summary>
        /// Gets and sets a reference to the IUIElementAdapterFactoryCatalog
        /// </summary>
        [ServiceDependency]
        public IUIElementAdapterFactoryCatalog AdapterCatalog
        {
            get { return _adapterCatalog; }
            set { _adapterCatalog = value; }
        }

        /// <summary>
        /// Gets or sets the role security service.
        /// </summary>
        /// <value>The role security service.</value>
        [ServiceDependency]
        public IRoleSecurityService SecuredActionService { get; set; }

        #endregion

		#region Page Lifetime Overrides
		protected override void InitializeCulture()
        {
            String selectedLanguage = null;
            const string languageCookieId = "SLXLanguageSetting";

            if (Request.Cookies[languageCookieId] != null)
			{
				selectedLanguage = Request.Cookies[languageCookieId].Value;
			}

			if (String.IsNullOrWhiteSpace(selectedLanguage) || !EnabledLanguageList.Languages.Exists(x => x.CultureCode.Equals(selectedLanguage, StringComparison.InvariantCultureIgnoreCase)))
			{
				// Cookie culture was either empty, corrupt, or doesn't match a value in the ELL. If this happens, see if the ELL has a matching culture code. If it does, use that, otherwise fall back to EN-US.
				EnabledLanguage currentBrowserLanguage = EnabledLanguageList.Languages.FirstOrDefault(x => x.CultureCode.StartsWith(Thread.CurrentThread.CurrentUICulture.Name, StringComparison.InvariantCultureIgnoreCase));

				selectedLanguage = (currentBrowserLanguage != null) ? currentBrowserLanguage.CultureCode : "en-us";

				// Then rebuild the cookie.
				var newCookie = new HttpCookie(languageCookieId) { Value = selectedLanguage };
				Response.Cookies.Add(newCookie);
				Request.Cookies.Remove(languageCookieId);
			}

			UICulture = selectedLanguage;
			Culture = selectedLanguage;

			Thread.CurrentThread.CurrentCulture = CultureInfo.CreateSpecificCulture(selectedLanguage);
			Thread.CurrentThread.CurrentUICulture = new CultureInfo(selectedLanguage);

			base.InitializeCulture();
		}

        protected override void OnPreInit(EventArgs e)
        {
            try
            {
                LoadScriptManager();
                base.OnPreInit(e);
                if (!SecuredActionService.HasAccess($page.AppliedSecurity.to_quote))
                {
                    throw new RoleAccessDeniedException(Resources.SalesLogix.Error_NoAccess);
                }
                IDataService data = ApplicationContext.Current.Services.Get<IDataService>();
                if(data != null)
                {
                    VFSQuery.ConfigureVFS(data.GetConnectionString(), data.Server);
                }

#if($page.PageProperties.Count > 0)
                //Apply Page Properties
                PropertyConfigurationCollection pageProperties = new PropertyConfigurationCollection();
#foreach( $prop in $page.PageProperties)
                pageProperties.Add($prop.PropertyName.to_quote, $tools.CleanString($prop.PropertyValue).to_quote, $prop.TypeConverter.to_quote);
#end
                pageProperties.ApplyProperties(this);
#end
#if($page.TemplateProperties.Count > 0)
                //Apply Template Properties
                PropertyConfigurationCollection templateProperties = new PropertyConfigurationCollection();
#foreach( $prop in $page.TemplateProperties)
                templateProperties.Add($prop.PropertyName.to_quote, $prop.PropertyValue.to_quote, $prop.TypeConverter.to_quote);
#end
                templateProperties.ApplyProperties(this.Master);
#end

                this.PageWorkItem.Services.AddNew<EntityFactoryContextService, IEntityContextService>();
                this.PageWorkItem.Services.Add<IWebDialogService>(new WebDialogService(this.PageWorkItem));
                this.PageWorkItem.Services.Add<IPageWorkItemLocator>(this.PageWorkItem);
                this.PageWorkItem.Services.AddNew<WebEntityBindingManager, IEntityBindingManager>();
                this.PageWorkItem.Services.AddNew<PanelRefreshService, IPanelRefreshService>();
               
            }
            catch(Exception ex)
            {
                HandleException(ex);
            }
        }
        protected override void OnLoad(EventArgs e)
        {
            try
            {
                base.OnLoad(e);
                MenuService mnuService = new MenuService();
                this.Page.Form.Controls.Add(mnuService);
                this.PageWorkItem.Services.Add<IMenuService>(mnuService);
                LoadLayout(this.Master);
                LoadNav();
                LoadMenu();
                LoadSmartParts();
                LoadTasklets();
                LoadModules();
#if($page.IncludeScript.Length > 0)
                LoadIncludeScript();
#end
            }
            catch(Exception ex)
            {
                HandleException(ex);
            }
        }
        protected override void OnPreRenderComplete(EventArgs e)
        {
            base.OnPreRenderComplete(e);
            SetTitleBar();
            HtmlContainerControl localTitle = this.Master.FindControl("localTitle") as HtmlContainerControl;
            if (localTitle == null) return;

            var img = !string.IsNullOrEmpty(TitleBar.Image)
                          ? string.Format("<div class=\"Global_Images icon24x24 {0}\"> </div>", this.TitleBar.Image)
                          : string.Empty;
            localTitle.InnerHtml = string.Format("<span id=\"PageTitle\">{0} <span id=\"PageTitleText\">{1}</span></span>", img, this.TitleBar.Text);
        }
        #endregion

        #region Helper Methods
        private void SetTitleBar()
        {
            string text = GetResource("PageTitle");            

#if($baseType == "Sage.Platform.WebPortal.EntityPage")
            IEntityContextService entityContext = this.PageWorkItem.Services.Get<IEntityContextService>();
            if (entityContext.HasEntityContext)
            {
                switch (this.ViewMode)
                {
                    case EntityViewMode.Detail:
                        text = string.Format("{0} - {1}", Type.GetType(EntityTypeName).GetDisplayName(), entityContext.GetEntity());
                        break;
                    case EntityViewMode.List:
                        text  = Type.GetType(EntityTypeName).GetPluralDisplayName();
                        break;
                    default:
                        break;
                }
            }

#end
			this.Title = HttpUtility.HtmlEncode(Resources.Portal.PortalBrowserTitle + " - " + text).Replace("&#39;","'");

            if (string.IsNullOrEmpty(text))
                text = Resources.Portal.PortalBrowserTitle;

            if (String.IsNullOrEmpty(this.TitleBar.Text))
            {
                TitleBar.Text = Server.HtmlEncode(text);
            }
            if (String.IsNullOrEmpty(this.TitleBar.Image))
            {
                TitleBar.Image = ImageClass;
            }
        }

        void LoadNav()
        {
            foreach (KeyValuePair<string, IWorkspace> wsPair in this.PageWorkItem.Workspaces)
            {
                if (wsPair.Value is NavWorkspace)
                {
#foreach($group in $portal.NavigationGroups)

                    NavItemCollection $group.ItemId = LoadControl($tools.ToAppRelative($group.ToRelativeUserControlPath()).to_quote).Controls[0] as NavItemCollection;
                    if (SecuredActionService.HasAccess(${group.ItemId}.AppliedSecurity))
                    {
                        ${group.ItemId}.ID = $group.ItemId.to_quote;
#set($spInfoId = "${group.ItemId}Info")
                        WebSmartPartInfo $spInfoId = new WebSmartPartInfo(GetResource($tools.ToAppRelative($group.ToRelativeUserControlPath()).to_quote, "Text"),GetResource($tools.ToAppRelative($group.ToRelativeUserControlPath()).to_quote, "Description"))
                        {SmallImagePath = $tools.ResolveImageUrl($group.SmallImageUrl).to_quote, LargeImagePath = $tools.ResolveImageUrl($group.LargeImageUrl).to_quote};
                        wsPair.Value.Show($group.ItemId, $spInfoId);
                        this.PageWorkItem.UIExtensionSites.RegisterSite($group.ItemId.to_quote, $group.ItemId);
                    }
#end
                }
            }
        }

#if($page.IncludeScript.Length > 0)
        void LoadIncludeScript()
        {	
            if (!Page.ClientScript.IsClientScriptIncludeRegistered("Page_IncludeScript"))
            {
                ScriptManager.RegisterClientScriptInclude(this, GetType(), "Page_IncludeScript", Page.ResolveUrl("$tools.ToAppRelative($page.IncludeScript)"));
            }
        }
#end

        void LoadMenu()
        {
            foreach (KeyValuePair<string, IWorkspace> wsPair in this.PageWorkItem.Workspaces)
            {
                if (wsPair.Value is ToolbarWorkspace)
                {
#foreach($menu in $portal.MenuItems)

                    NavItemCollection $menu.ItemId = LoadControl($tools.ToAppRelative($menu.ToRelativeUserControlPath()).to_quote).Controls[0] as NavItemCollection;
                    if (SecuredActionService.HasAccess(${menu.ItemId}.AppliedSecurity))
                    {
                        ${menu.ItemId}.ID = $menu.ItemId.to_quote;
#set($spInfoId = "${menu.ItemId}Info")
                        WebToolbarSmartPartInfo $spInfoId = new WebToolbarSmartPartInfo(GetResource($tools.ToAppRelative($menu.ToRelativeUserControlPath()).to_quote, "Text"),GetResource($tools.ToAppRelative($menu.ToRelativeUserControlPath()).to_quote, "Description"))
                        { SmallImagePath = $tools.ResolveImageUrl($menu.SmallImageUrl).to_quote,LargeImagePath = $tools.ResolveImageUrl($menu.LargeImageUrl).to_quote, LargeImageClass = $tools.ImageToCssClass($menu.LargeImageUrl).to_quote, SmallImageClass = $tools.ImageToCssClass($menu.SmallImageUrl).to_quote};
                        wsPair.Value.Show($menu.ItemId, $spInfoId);
                    }
#end
                }
            }
        }

        void LoadSmartParts()
        {
#foreach ($sp in $page.SmartParts)
#if($sp.Properties.Count > 0)
            PropertyConfigurationCollection ${sp.SmartPartId}Properties = new PropertyConfigurationCollection();
#foreach( $prop in $sp.Properties)
            ${sp.SmartPartId}Properties.Add($prop.PropertyName.to_quote, $prop.PropertyValue.to_quote, $prop.TypeConverter.to_quote);
#end
            RegisterSmartPart($sp.TargetWorkspace.to_quote, $sp.ShowInMode.to_quote,$sp.AllowRoles.to_quote,$tools.ToAppRelative($sp.RuntimeUrl).to_quote, $sp.SmartPartId.to_quote,GetResource("${sp.SmartPartId}.Title"),GetResource("${sp.SmartPartId}.Description"),${sp.SmartPartId}Properties);

#else
            RegisterSmartPart($sp.TargetWorkspace.to_quote, $sp.ShowInMode.to_quote,$sp.AllowRoles.to_quote,$tools.ToAppRelative($sp.RuntimeUrl).to_quote, $sp.SmartPartId.to_quote,GetResource("${sp.SmartPartId}.Title"),GetResource("${sp.SmartPartId}.Description"),null);
#end
#end
        }

        string GetResource(string url, string key)
        {
            object obj = HttpContext.GetLocalResourceObject(url, key);
            if(obj != null)
                return obj.ToString();
            else
                return String.Empty;
        }
        string GetResource(string key)
        {
            return GetResource("~/${page.PageAlias}.aspx", key);
        }

        void LoadModules()
        {
#foreach ($mod in $page.GetAllModules())
#if($mod.Properties.Count > 0)
            if(IsModeMatch($mod.RunInMode.to_quote) && IsRoleMatch($mod.AllowRoles.to_quote))
            {
                var m = new $mod();
                var configs = new PropertyConfigurationCollection();
#foreach($prop in $mod.Properties)
                configs.Add($prop.PropertyName.to_quote, $prop.PropertyValue.to_quote, $prop.TypeConverter.to_quote);
#end
                configs.ApplyProperties(m);
                RegisterModule($mod.RunInMode.to_quote, $mod.AllowRoles.to_quote, m);
            }
#else
            RegisterModule<${mod}>($mod.RunInMode.to_quote, $mod.AllowRoles.to_quote);
#end
#end
        }
        void LoadTasklets()
        {
            foreach (KeyValuePair<string, IWorkspace> wsPair in PageWorkItem.Workspaces)
            {
                if (wsPair.Value is TaskPaneWorkspace)
                {
#if($portal.Tasklets.Count > 0)
                    Control ctrl;
#foreach ($tasklet in $portal.Tasklets)
                    ctrl = LoadControl($tools.ToAppRelative($tasklet.SmartPart).to_quote);
                    ctrl.ID = $tasklet.SmartPartId.to_quote;
                    wsPair.Value.Show(ctrl, new TaskPaneSmartPartInfo(
                        (string) GetGlobalResourceObject("Tasklets", "${tasklet.SmartPartId}.Title"),
                        (string) GetGlobalResourceObject("Tasklets", "${tasklet.SmartPartId}.Description"),
                        ContextDisplayMode.${tasklet.DisplayMode},
                        new string[] { #list($entity in $tasklet.Entities ',') $entity.to_quote #end },
                        $tasklet.UseCustomRendering.ToString().ToLower()));
#end
#end
                }
            }
        }
        void LoadLayout(Control parentControl)
        {
            foreach (Control childControl in parentControl.Controls)
            {
                //Load Workspaces
                IWorkspace ws = childControl as IWorkspace;
                if (ws != null)
                {
                    this.PageWorkItem.Workspaces.Add(ws, childControl.ID);

                }

                //Load SmartParts
                if (Attribute.IsDefined(childControl.GetType(), typeof(SmartPartAttribute)))
                    this.PageWorkItem.SmartParts.Add(childControl);

                //Load UIExtensionSites
                if (CanBeExtensionSite(childControl))
                    this.PageWorkItem.UIExtensionSites.RegisterSite(childControl.ID, childControl);

                LoadLayout(childControl);
            }
        }
        bool CanBeExtensionSite(Control c)
        {
            foreach (IUIElementAdapterFactory factory in AdapterCatalog.Factories)
            {
                if (factory.Supports(c))
                    return true;
            }
            return false;
        }
        void LoadScriptManager()
        {
            HtmlForm form = FindForm();
            if (form != null)
            {
                _scriptManager = new ScriptManager
                    {
                        ID = "portalScriptManager",
                        EnableScriptLocalization = true,
                        EnableScriptGlobalization = true,
                        AllowCustomErrorsRedirect = false
                    };
                _scriptManager.AsyncPostBackError += new EventHandler<AsyncPostBackErrorEventArgs>(_scriptManager_AsyncPostBackError);
                form.Controls.AddAt(0, _scriptManager);
            }
        }
        private HtmlForm FindFormRecursive (Control root)
        {
            HtmlForm form = root as HtmlForm;
            if (form == null)
            {
                foreach (Control c in root.Controls)
                {
                    form = FindFormRecursive(c) as HtmlForm;
                    if (form != null)
                    {
                        break;
                    }
                }
            }
            return form;
        }
        HtmlForm FindForm()
        {
            foreach (Control c in this.Master.Controls)
            {
                HtmlForm form = FindFormRecursive(c);
                if (form != null)
                {
                    return (form);
                }
            }
            return null;
        }

        void _scriptManager_AsyncPostBackError(object sender, AsyncPostBackErrorEventArgs e)
        {
            var exception = e != null ? e.Exception : null;

            if (IsAuthenticatedEx() == ErrorHelper.ResultKind.False)
            {
                if (log.IsWarnEnabled && ErrorHelper.LogAuthenticationRedirects())
                {
                    log.WarnEx("The user is either not authenticated yet or their authentication has been revoked (e.g. the ASP.NET Session may have ended).", EventIds.AdHocEvents.WarnAuthenticationRedirect, exception);
                }
                Server.ClearError();
                var message = (ErrorHelper.LooksLikeAjaxRequest(Request)) ?
                                  string.Format("${{{0}}}", ErrorHelper.MitigationType.AjaxLoginRedirect)
                                  : string.Format("${{{0}}}", ErrorHelper.MitigationType.LoginRedirect);
                _scriptManager.AsyncPostBackErrorMessage = message;
                if (ErrorHelper.LooksLikeAjaxRequest(Request) == false)
                {
                    LoginRedirect(false, null);
                }
                return;
            }

            if (exception == null) return;

            var fullException = exception;

            var eKind = ErrorHelper.GetTargetedException(fullException, out exception);

            var eMitigationType = ErrorHelper.GetMitigationType(eKind, Request);

            var sSlxErrorId = ErrorHelper.GetNewLoggingId();

            if (ErrorHelper.ExceptionMustBeLogged(eKind))
            {
                ErrorHelper.LogException(fullException, Request, log, string.Format("{0} unhandled exception during async postback", ErrorHelper.GetCurrentEventLogSource()), sSlxErrorId, ErrorHelper.GetCurrentEventLogSource());
            }

            Server.ClearError();

            switch (eMitigationType)
            {
                case ErrorHelper.MitigationType.AjaxLoginRedirect:
                    _scriptManager.AsyncPostBackErrorMessage = string.Format("${{{0}}}", ErrorHelper.MitigationType.AjaxLoginRedirect);
                    break;

                case ErrorHelper.MitigationType.LoginRedirect:
                    _scriptManager.AsyncPostBackErrorMessage = string.Format("${{{0}}}", ErrorHelper.MitigationType.LoginRedirect);
                    LoginRedirect(false, sSlxErrorId);
                    break;

                default:
                    _scriptManager.AsyncPostBackErrorMessage = ErrorHelper.GetErrorMessageContent(exception, Request, eKind, sSlxErrorId, true, true, Resources.SalesLogix.MailDetailsLink);
                    break;
            }
        }

        void InitMode()
        {
            if (HttpContext.Current != null && HttpContext.Current.Request != null)
            {
                this.PageWorkItem.State["ModeId"] = HttpContext.Current.Request["ModeId"];
            }
        }
         #endregion
    }
}